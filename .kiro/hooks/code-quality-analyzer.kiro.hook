{
  "enabled": true,
  "name": "Code Quality Analyzer",
  "description": "Monitors source code files for changes and analyzes modified code for potential improvements including code smells, design patterns, and best practices. Generates actionable suggestions for improving code quality while maintaining existing functionality.",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "app/**/*.tsx",
      "app/**/*.ts",
      "components/**/*.tsx",
      "components/**/*.ts",
      "lib/**/*.ts",
      "hooks/**/*.ts",
      "middleware.ts"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "Analyze the modified code files for potential improvements. Focus on:\n\n1. **Code Smells & Anti-patterns**: Identify long functions, duplicate code, complex conditionals, and other code smells\n2. **Design Patterns**: Suggest appropriate design patterns that could improve the code structure\n3. **Best Practices**: Check for TypeScript/React/Next.js best practices, proper error handling, and security considerations\n4. **Performance**: Look for potential performance optimizations like unnecessary re-renders, inefficient algorithms, or memory leaks\n5. **Readability & Maintainability**: Suggest improvements for variable naming, function decomposition, and code organization\n\nFor each suggestion, provide:\n- Clear explanation of the issue\n- Specific code example showing the improvement\n- Reasoning for why this change would be beneficial\n- Priority level (High/Medium/Low)\n\nMaintain focus on practical, actionable improvements that enhance code quality without breaking existing functionality."
  }
}