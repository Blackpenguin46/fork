{
  "enabled": true,
  "name": "Feature Specification Generator",
  "description": "Automatically generates detailed feature specification prompts when new page or component files are created for AI implementation",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "app/**/page.tsx",
      "app/**/layout.tsx",
      "components/**/*.tsx",
      "pages/**/*.tsx"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "New page or component files have been detected. Please analyze the created files and generate comprehensive feature specification prompts that AI can use to implement full functionality.\n\n**Analysis Tasks:**\n\n## 1. File Analysis and Classification\n\n**Analyze Created Files:**\n- **File Type**: Page component, layout, UI component, or feature component\n- **Route Structure**: Determine URL path and routing behavior\n- **Feature Area**: Identify which part of Cybernex Academy this belongs to\n- **Component Hierarchy**: Understand parent-child relationships\n- **Naming Patterns**: Extract feature intent from file and folder names\n\n**Classification Categories:**\n- **Page Components**: Full page implementations with routing\n- **Layout Components**: Structural components for page organization\n- **Feature Components**: Business logic components for specific functionality\n- **UI Components**: Reusable interface elements\n- **Form Components**: Data input and validation components\n\n## 2. Generate Feature Specifications\n\n**For Each New File, Create: `.kiro/specs/[feature-name]-specification.md`**\n\n```markdown\n# Feature Specification: [Feature Name]\n\n*Auto-generated from: [file-path]*\n*Created: [timestamp]*\n*Type: [Page/Component/Layout]*\n*Feature Area: [Authentication/Learning/Community/Admin/etc.]*\n\n## 🎯 Feature Overview\n\n### Purpose & Goals\n- **Primary Purpose**: [What this feature accomplishes]\n- **User Value**: [How this benefits Cybernex Academy users]\n- **Business Goal**: [How this supports business objectives]\n- **Success Metrics**: [How to measure feature success]\n\n### Target Users\n- **Primary Users**: [Main user type - students, professionals, instructors]\n- **Secondary Users**: [Additional user types who might use this]\n- **User Personas**: [Specific user scenarios and needs]\n- **Access Requirements**: [Authentication, subscription tier, permissions]\n\n### Feature Scope\n- **Core Functionality**: [Essential features that must be implemented]\n- **Enhanced Features**: [Nice-to-have features for better UX]\n- **Future Enhancements**: [Potential future additions]\n- **Out of Scope**: [What this feature explicitly does NOT do]\n\n## 🏗️ Technical Specification\n\n### Component Architecture\n```\n[feature-name]/\n├── [MainComponent].tsx           # Primary component implementation\n├── components/\n│   ├── [SubComponent1].tsx      # Supporting components\n│   ├── [SubComponent2].tsx      # Feature-specific UI elements\n│   └── [FormComponent].tsx      # Data input components\n├── hooks/\n│   ├── use[Feature].ts          # Custom hooks for business logic\n│   └── use[Feature]Data.ts      # Data fetching and state management\n├── types/\n│   └── [feature].types.ts       # TypeScript type definitions\n├── utils/\n│   └── [feature]-utils.ts       # Utility functions\n└── __tests__/\n    ├── [MainComponent].test.tsx # Component tests\n    └── [feature]-utils.test.ts  # Utility tests\n```\n\n### Data Requirements\n\n#### Database Schema\n```sql\n-- Required database tables/modifications\nCREATE TABLE IF NOT EXISTS [table_name] (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  user_id UUID REFERENCES profiles(id),\n  [field_name] [data_type] [constraints],\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Required indexes for performance\nCREATE INDEX IF NOT EXISTS idx_[table]_[field] ON [table_name]([field_name]);\n\n-- RLS policies for security\nALTER TABLE [table_name] ENABLE ROW LEVEL SECURITY;\nCREATE POLICY \"Users can manage their own [records]\" ON [table_name]\n  FOR ALL USING (auth.uid() = user_id);\n```\n\n#### API Endpoints\n```typescript\n// Required API routes\n// GET /api/[feature] - Retrieve feature data\n// POST /api/[feature] - Create new records\n// PUT /api/[feature]/[id] - Update existing records\n// DELETE /api/[feature]/[id] - Remove records\n\n// API Response Types\ninterface [Feature]Response {\n  success: boolean\n  data?: [Feature][]\n  error?: string\n  pagination?: PaginationInfo\n}\n```\n\n#### TypeScript Interfaces\n```typescript\n// Core data types\ninterface [Feature] {\n  id: string\n  userId: string\n  [property]: [type]\n  createdAt: string\n  updatedAt: string\n}\n\n// Form data types\ninterface [Feature]FormData {\n  [field]: [type]\n  // Validation rules and constraints\n}\n\n// Component prop types\ninterface [Feature]ComponentProps {\n  [prop]: [type]\n  onAction?: (data: [Feature]) => void\n  className?: string\n}\n```\n\n### Integration Requirements\n\n#### Authentication Integration\n- **Access Control**: [Who can access this feature]\n- **Permission Levels**: [Different access levels if applicable]\n- **Authentication Flow**: [How users authenticate to use this]\n- **Session Management**: [How user sessions are handled]\n\n#### Subscription Tier Integration\n- **Free Tier**: [What functionality is available to free users]\n- **Pro Tier**: [Additional features for Pro subscribers]\n- **Enterprise Tier**: [Advanced features for Enterprise users]\n- **Upgrade Prompts**: [When and how to prompt for upgrades]\n\n#### External Service Integration\n- **Supabase**: [Database operations, real-time subscriptions]\n- **Stripe**: [Payment processing if applicable]\n- **Email Service**: [Notifications and communications]\n- **Analytics**: [User behavior tracking and metrics]\n\n## 🎨 User Experience Specification\n\n### User Interface Design\n\n#### Layout Structure\n```\n┌─────────────────────────────────────┐\n│ Header/Navigation                   │\n├─────────────────────────────────────┤\n│ Feature Title & Description         │\n├─────────────────────────────────────┤\n│ Main Content Area                   │\n│ ┌─────────────┐ ┌─────────────────┐ │\n│ │ Sidebar/    │ │ Primary Content │ │\n│ │ Filters     │ │ Display Area    │ │\n│ │             │ │                 │ │\n│ └─────────────┘ └─────────────────┘ │\n├─────────────────────────────────────┤\n│ Action Buttons & Controls           │\n└─────────────────────────────────────┘\n```\n\n#### Visual Design Requirements\n- **Color Scheme**: [Cybernex Academy brand colors - cyber theme]\n- **Typography**: [Font choices and hierarchy]\n- **Spacing**: [Consistent spacing using Tailwind classes]\n- **Icons**: [Lucide React icons for consistency]\n- **Animations**: [Framer Motion for smooth interactions]\n\n#### Responsive Behavior\n- **Desktop (1024px+)**: [Full layout with all features visible]\n- **Tablet (768px-1023px)**: [Adapted layout with collapsible elements]\n- **Mobile (320px-767px)**: [Stacked layout with mobile-optimized interactions]\n\n### User Interaction Flows\n\n#### Primary User Flow\n1. **Entry Point**: [How users access this feature]\n   - Navigation menu item\n   - Direct URL access\n   - Link from other features\n   - Search results\n\n2. **Initial State**: [What users see when they first arrive]\n   - Loading states and skeleton screens\n   - Empty states with helpful guidance\n   - Default data or sample content\n\n3. **Core Interactions**: [Main user actions]\n   - [Action 1]: [Description and expected outcome]\n   - [Action 2]: [Description and expected outcome]\n   - [Action 3]: [Description and expected outcome]\n\n4. **Success States**: [What happens when actions complete successfully]\n   - Confirmation messages\n   - Updated UI states\n   - Navigation to next steps\n\n5. **Error Handling**: [How errors are presented and resolved]\n   - Validation errors with clear guidance\n   - Network errors with retry options\n   - Permission errors with upgrade prompts\n\n#### Secondary Flows\n- **Search and Filtering**: [How users find specific content]\n- **Sorting and Organization**: [How users organize information]\n- **Sharing and Collaboration**: [How users share or collaborate]\n- **Settings and Customization**: [How users personalize the experience]\n\n### Accessibility Requirements\n\n#### WCAG 2.1 AA Compliance\n- **Keyboard Navigation**: [All functionality accessible via keyboard]\n- **Screen Reader Support**: [Proper ARIA labels and descriptions]\n- **Color Contrast**: [Minimum 4.5:1 contrast ratio]\n- **Focus Management**: [Clear focus indicators and logical tab order]\n- **Alternative Text**: [Descriptive alt text for images and icons]\n\n#### Implementation Details\n```typescript\n// Accessibility attributes\n<button\n  aria-label=\"[Descriptive action label]\"\n  aria-describedby=\"[help-text-id]\"\n  tabIndex={0}\n  onKeyDown={handleKeyDown}\n>\n  [Button Content]\n</button>\n\n// Screen reader announcements\nconst announceToScreenReader = (message: string) => {\n  // Implementation for dynamic content updates\n}\n```\n\n## 🔧 Implementation Specification\n\n### Development Phases\n\n#### Phase 1: Foundation (Week 1)\n- [ ] Set up component structure and basic layout\n- [ ] Implement TypeScript interfaces and types\n- [ ] Create database schema and migrations\n- [ ] Set up basic API endpoints\n- [ ] Implement authentication integration\n\n#### Phase 2: Core Functionality (Week 2)\n- [ ] Implement main feature logic and business rules\n- [ ] Add data fetching and state management\n- [ ] Create form handling and validation\n- [ ] Implement CRUD operations\n- [ ] Add error handling and loading states\n\n#### Phase 3: User Experience (Week 3)\n- [ ] Implement responsive design and mobile optimization\n- [ ] Add animations and micro-interactions\n- [ ] Implement search, filtering, and sorting\n- [ ] Add accessibility features and ARIA labels\n- [ ] Optimize performance and loading times\n\n#### Phase 4: Integration & Polish (Week 4)\n- [ ] Integrate with subscription tiers and permissions\n- [ ] Add analytics tracking and user behavior metrics\n- [ ] Implement sharing and collaboration features\n- [ ] Add comprehensive error handling and edge cases\n- [ ] Perform security audit and testing\n\n### Code Implementation Guidelines\n\n#### Component Structure\n```typescript\n// Main component template\nimport { useState, useEffect } from 'react'\nimport { use[Feature] } from '@/hooks/use[Feature]'\nimport { [Feature]Type } from '@/types/[feature]'\nimport { Button } from '@/components/ui/button'\nimport { Card } from '@/components/ui/card'\n\ninterface [Feature]ComponentProps {\n  // Define props with proper TypeScript types\n}\n\nexport function [Feature]Component({ }: [Feature]ComponentProps) {\n  // State management\n  const { data, loading, error, actions } = use[Feature]()\n  \n  // Event handlers\n  const handleAction = async (actionData: ActionType) => {\n    try {\n      await actions.performAction(actionData)\n      // Handle success\n    } catch (error) {\n      // Handle error\n    }\n  }\n  \n  // Loading state\n  if (loading) {\n    return <[Feature]LoadingSkeleton />\n  }\n  \n  // Error state\n  if (error) {\n    return <[Feature]ErrorState error={error} onRetry={actions.retry} />\n  }\n  \n  // Main render\n  return (\n    <div className=\"[feature]-container\">\n      {/* Component implementation */}\n    </div>\n  )\n}\n```\n\n#### Custom Hook Pattern\n```typescript\n// Custom hook for feature logic\nexport function use[Feature]() {\n  const [state, setState] = useState<[Feature]State>(initialState)\n  \n  // Data fetching\n  const fetchData = useCallback(async () => {\n    // Implementation\n  }, [])\n  \n  // Actions\n  const actions = useMemo(() => ({\n    create: async (data: [Feature]CreateData) => {\n      // Implementation\n    },\n    update: async (id: string, data: [Feature]UpdateData) => {\n      // Implementation\n    },\n    delete: async (id: string) => {\n      // Implementation\n    }\n  }), [])\n  \n  return {\n    ...state,\n    actions\n  }\n}\n```\n\n### Testing Specification\n\n#### Unit Tests\n```typescript\n// Component testing\ndescribe('[Feature]Component', () => {\n  it('renders correctly with data', () => {\n    // Test implementation\n  })\n  \n  it('handles loading state', () => {\n    // Test implementation\n  })\n  \n  it('handles error state', () => {\n    // Test implementation\n  })\n  \n  it('handles user interactions', () => {\n    // Test implementation\n  })\n})\n\n// Hook testing\ndescribe('use[Feature]', () => {\n  it('fetches data correctly', () => {\n    // Test implementation\n  })\n  \n  it('handles CRUD operations', () => {\n    // Test implementation\n  })\n})\n```\n\n#### Integration Tests\n- **API Integration**: Test all API endpoints with various data scenarios\n- **Database Operations**: Verify CRUD operations and data integrity\n- **Authentication Flow**: Test access control and permission handling\n- **Subscription Integration**: Verify tier-based feature access\n\n#### E2E Tests\n- **Complete User Journey**: Test full user workflow from start to finish\n- **Cross-browser Compatibility**: Verify functionality across browsers\n- **Mobile Responsiveness**: Test mobile user experience\n- **Accessibility Compliance**: Verify screen reader and keyboard navigation\n\n### Performance Requirements\n\n#### Loading Performance\n- **Initial Load**: < 2 seconds for first meaningful paint\n- **Data Fetching**: < 1 second for API responses\n- **User Interactions**: < 100ms response time for UI updates\n- **Bundle Size**: Minimize JavaScript bundle impact\n\n#### Optimization Strategies\n- **Code Splitting**: Lazy load components and routes\n- **Data Caching**: Implement appropriate caching strategies\n- **Image Optimization**: Use Next.js Image component with optimization\n- **Database Queries**: Optimize queries and use proper indexing\n\n### Security Requirements\n\n#### Data Protection\n- **Input Validation**: Sanitize and validate all user inputs\n- **SQL Injection Prevention**: Use parameterized queries\n- **XSS Prevention**: Properly escape output and use CSP headers\n- **CSRF Protection**: Implement CSRF tokens for state-changing operations\n\n#### Access Control\n- **Authentication**: Verify user identity for protected features\n- **Authorization**: Check user permissions for specific actions\n- **Rate Limiting**: Prevent abuse with appropriate rate limits\n- **Audit Logging**: Log important user actions for security monitoring\n\n## 📊 Success Criteria & Metrics\n\n### Functional Success Criteria\n- [ ] All core functionality works as specified\n- [ ] User can complete primary workflows without errors\n- [ ] Data is properly validated and stored\n- [ ] Integration with existing systems works correctly\n- [ ] Security requirements are met\n\n### Performance Success Criteria\n- [ ] Page load times meet performance requirements\n- [ ] API responses are within acceptable limits\n- [ ] UI interactions feel responsive and smooth\n- [ ] Mobile experience is optimized\n- [ ] Accessibility standards are met\n\n### User Experience Success Criteria\n- [ ] Users can intuitively understand how to use the feature\n- [ ] Error messages are clear and actionable\n- [ ] Loading states provide appropriate feedback\n- [ ] Feature integrates seamlessly with existing UI\n- [ ] Mobile and desktop experiences are consistent\n\n### Business Success Criteria\n- [ ] Feature supports business objectives\n- [ ] User engagement metrics show positive trends\n- [ ] Feature adoption rates meet expectations\n- [ ] Support ticket volume remains manageable\n- [ ] Feature contributes to subscription conversions (if applicable)\n\n## 📚 Implementation Resources\n\n### Documentation References\n- [Next.js 14 Documentation](https://nextjs.org/docs)\n- [React TypeScript Best Practices](https://react-typescript-cheatsheet.netlify.app/)\n- [Supabase Documentation](https://supabase.com/docs)\n- [Tailwind CSS Documentation](https://tailwindcss.com/docs)\n- [Framer Motion Documentation](https://www.framer.com/motion/)\n\n### Internal Resources\n- [Cybernex Academy Component Library](./component-library-guide.md)\n- [Database Schema Documentation](./database-schema.md)\n- [API Documentation](./api-documentation.md)\n- [Design System Guidelines](./design-system.md)\n- [Security Best Practices](./security-guidelines.md)\n\n### Code Examples\n- [Similar Feature Implementation](./examples/similar-feature.tsx)\n- [Authentication Integration Pattern](./examples/auth-integration.tsx)\n- [Data Fetching Pattern](./examples/data-fetching.tsx)\n- [Form Handling Pattern](./examples/form-handling.tsx)\n\n---\n\n## 🤖 AI Implementation Prompt\n\n**Ready-to-Execute Implementation Prompt:**\n\n```\nImplement the [Feature Name] feature for Cybernex Academy based on the above specification.\n\n**Priority Implementation Order:**\n1. Set up component structure and TypeScript types\n2. Implement database schema and API endpoints\n3. Create core component functionality\n4. Add user interface and styling\n5. Implement data fetching and state management\n6. Add form handling and validation\n7. Implement responsive design and accessibility\n8. Add error handling and loading states\n9. Write comprehensive tests\n10. Optimize performance and security\n\n**Key Requirements:**\n- Follow Next.js 14 App Router patterns\n- Use TypeScript strict mode throughout\n- Implement proper error handling and loading states\n- Ensure mobile responsiveness with Tailwind CSS\n- Add comprehensive accessibility features\n- Integrate with Supabase for data operations\n- Follow Cybernex Academy design patterns\n- Include proper testing coverage\n\n**Success Validation:**\nAfter implementation, verify that:\n- All functional requirements are met\n- Performance benchmarks are achieved\n- Security requirements are satisfied\n- Accessibility standards are met\n- User experience flows work smoothly\n- Integration with existing systems is seamless\n\nPlease implement this feature incrementally, testing each phase before proceeding to the next.\n```\n```\n\n## 3. Feature Area Specific Templates\n\n**Generate specialized templates based on detected feature area:**\n\n### Authentication Features\n- **Security Requirements**: Enhanced security specifications\n- **Compliance**: GDPR, CCPA, and cybersecurity standards\n- **Integration**: Supabase Auth, social logins, MFA\n- **User Experience**: Secure but user-friendly flows\n\n### Learning Management Features\n- **Progress Tracking**: User progress and achievement systems\n- **Content Delivery**: Video, text, interactive content\n- **Assessment**: Quizzes, certifications, skill validation\n- **Personalization**: Adaptive learning paths\n\n### Community Features\n- **User Interaction**: Forums, discussions, messaging\n- **Content Moderation**: Automated and manual moderation\n- **Reputation Systems**: User karma, badges, achievements\n- **Social Features**: Following, sharing, collaboration\n\n### Admin Features\n- **Data Management**: CRUD operations with bulk actions\n- **Analytics**: Comprehensive reporting and insights\n- **User Management**: Role-based access control\n- **System Monitoring**: Health checks and performance metrics\n\n## 4. Cybernex Academy Context Integration\n\n**Automatically include relevant context:**\n\n### Business Context\n- **Target Audience**: Cybersecurity professionals and students\n- **Business Model**: Freemium with Pro/Enterprise tiers\n- **Value Proposition**: Professional development and career advancement\n- **Competitive Advantage**: Community-driven learning platform\n\n### Technical Context\n- **Technology Stack**: Next.js 14, TypeScript, Supabase, Tailwind CSS\n- **Architecture Patterns**: App Router, Server Components, API Routes\n- **Design System**: Cyber theme with professional aesthetics\n- **Performance Standards**: Fast loading, responsive design\n\n### User Context\n- **User Types**: Students, professionals, instructors, administrators\n- **Use Cases**: Learning, networking, career development, content creation\n- **Device Usage**: Desktop-primary with mobile support\n- **Accessibility Needs**: Professional accessibility standards\n\n## Instructions:\n1. **Analyze new page/component files** to determine feature type and scope\n2. **Generate comprehensive feature specifications** with detailed requirements\n3. **Include technical implementation details** with code examples and patterns\n4. **Add user experience specifications** with interaction flows and accessibility\n5. **Provide testing and performance requirements** with specific criteria\n6. **Create ready-to-execute AI prompts** for immediate implementation\n7. **Include Cybernex Academy specific context** and business requirements\n8. **Generate phase-based implementation plans** with clear milestones\n\nThe goal is to provide AI agents with comprehensive specifications that enable them to implement complete, production-ready features that align with Cybernex Academy's goals and standards."
  }
}