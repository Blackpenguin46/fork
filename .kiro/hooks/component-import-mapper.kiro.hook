{
  "enabled": true,
  "name": "Component Import Mapper",
  "description": "Automatically maintains a central import map file when new components are created anywhere in the project",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "components/**/*.tsx",
      "components/**/*.ts",
      "app/**/*.tsx",
      "lib/**/*.tsx"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "Component files have been modified. Please scan the entire project and update the central component import map to reflect all available components.\n\n**Create/Update: `components/component-map.ts`**\n\nThis file should contain:\n\n1. **Complete Component Inventory** - Scan all component files and create a comprehensive map\n2. **Organized by Section** - Group components by their folder structure\n3. **Import Paths** - Provide exact import paths for each component\n4. **Component Metadata** - Include brief descriptions and props information where available\n\n**File Structure:**\n```typescript\n/**\n * Central Component Import Map\n * Auto-generated by Kiro Hook - DO NOT EDIT MANUALLY\n */\n\n// UI COMPONENTS (Base Radix UI Components)\nexport const UI_COMPONENTS = {\n  Button: {\n    path: '@/components/ui/button',\n    description: 'Base button component with variants',\n    props: ['variant', 'size', 'disabled', 'onClick']\n  },\n  Card: {\n    path: '@/components/ui/card',\n    description: 'Card container with header, content, footer',\n    props: ['className', 'children']\n  },\n  // ... continue for all UI components\n} as const;\n\n// LAYOUT COMPONENTS\nexport const LAYOUT_COMPONENTS = {\n  // Scan components/layout/ folder\n} as const;\n\n// Continue for all component sections...\n\n// COMPLETE COMPONENT MAP\nexport const ALL_COMPONENTS = {\n  ui: UI_COMPONENTS,\n  layout: LAYOUT_COMPONENTS,\n  auth: AUTH_COMPONENTS,\n  dashboard: DASHBOARD_COMPONENTS,\n  // ... all sections\n} as const;\n\n// HELPER FUNCTIONS\nexport function findComponent(name: string) {\n  // Implementation for finding components\n}\n```\n\n**Instructions:**\n1. **Scan all component files** in the project\n2. **Extract component names** from file names and exports\n3. **Determine component sections** based on folder structure\n4. **Analyze props** from TypeScript interfaces where available\n5. **Generate descriptions** based on component purpose and context\n6. **Update the complete map** with all discovered components\n7. **Maintain TypeScript types** for better IDE support\n\nThis file will serve as a comprehensive reference for AI agents to understand all available components in the Cybernex Academy project."
  }
}