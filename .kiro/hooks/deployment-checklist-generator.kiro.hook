{
  "enabled": true,
  "name": "Deployment Checklist Generator",
  "description": "Automatically creates deployment checklist tasks when new environment variables or external APIs are added",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      ".env.example",
      ".env.local",
      ".env.secrets",
      "lib/config/*.ts",
      "lib/services/*.ts",
      "app/api/**/*.ts",
      "next.config.js",
      "vercel.json",
      "package.json"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "Environment configuration or external API integration changes have been detected. Please analyze the changes and create comprehensive deployment checklist tasks for proper production deployment.\n\n**Analysis Tasks:**\n\n## 1. Detect Configuration Changes\n\n**Analyze Modified Files:**\n- **Environment Files**: Check for new variables in .env files\n- **Config Files**: Identify new configuration options\n- **Service Files**: Detect new external API integrations\n- **API Routes**: Find new endpoints requiring external services\n- **Package Changes**: New dependencies requiring configuration\n\n**Categorize Changes:**\n- **New Environment Variables**: Required for application functionality\n- **External API Integrations**: Third-party services and authentication\n- **Database Configuration**: Connection strings and credentials\n- **Feature Flags**: New toggles and configuration options\n- **Security Settings**: API keys, secrets, and authentication tokens\n\n## 2. Generate Deployment Checklist\n\n**Create/Update: `.kiro/deployment-checklist.md`**\n\n```markdown\n# Deployment Checklist\n\n*Auto-generated: [timestamp]*\n*Triggered by: Configuration changes detected*\n*Environment: Production Deployment*\n\n## 🔍 Pre-Deployment Analysis\n\n### Changes Detected\n- ✅ New environment variables identified\n- ✅ External API integrations added\n- ✅ Configuration updates required\n- ✅ Dependencies and services analyzed\n\n### Impact Assessment\n- **Criticality**: High/Medium/Low\n- **Rollback Complexity**: Simple/Moderate/Complex\n- **Downtime Required**: Yes/No - [Duration estimate]\n- **User Impact**: [Description of user-facing changes]\n\n## 🔧 Environment Variables Setup\n\n### New Variables Required\n\n#### [VARIABLE_NAME_1]\n- **Purpose**: [Description of what this variable controls]\n- **Type**: String/Number/Boolean/JSON\n- **Required**: Yes/No\n- **Default Value**: [If applicable]\n- **Example**: `VARIABLE_NAME_1=example_value`\n- **Where to Set**: Vercel Dashboard → Project → Settings → Environment Variables\n- **Environments**: Production, Preview, Development\n\n**Setup Instructions:**\n```bash\n# Local development\necho \"VARIABLE_NAME_1=your_value_here\" >> .env.local\n\n# Vercel CLI (alternative)\nvercel env add VARIABLE_NAME_1\n```\n\n#### [VARIABLE_NAME_2]\n- **Purpose**: [API key for external service integration]\n- **Type**: String (Secret)\n- **Required**: Yes\n- **Security Level**: High - Store as encrypted secret\n- **Where to Obtain**: [Service provider dashboard/documentation]\n- **Validation**: [How to test if the key works]\n\n**Security Checklist:**\n- [ ] Variable marked as secret in Vercel\n- [ ] Not exposed to client-side code\n- [ ] Proper access controls configured\n- [ ] Rotation schedule established (if applicable)\n\n### Environment Variable Validation\n\n**Create validation script:**\n```typescript\n// lib/config/env-validation.ts\nconst requiredEnvVars = [\n  'VARIABLE_NAME_1',\n  'VARIABLE_NAME_2',\n  // Add all required variables\n]\n\nexport function validateEnvironment() {\n  const missing = requiredEnvVars.filter(varName => !process.env[varName])\n  \n  if (missing.length > 0) {\n    throw new Error(`Missing required environment variables: ${missing.join(', ')}`)\n  }\n  \n  console.log('✅ All required environment variables are present')\n}\n```\n\n## 🌐 External API Integration Setup\n\n### [API_SERVICE_NAME] Integration\n\n#### Service Configuration\n- **Service**: [Name and purpose]\n- **Documentation**: [Link to API docs]\n- **Authentication**: API Key/OAuth/JWT\n- **Rate Limits**: [Requests per minute/hour]\n- **Pricing Tier**: Free/Paid - [Cost implications]\n\n#### Required Setup Steps\n1. **Account Creation**\n   - [ ] Create account at [service provider]\n   - [ ] Verify email and complete setup\n   - [ ] Choose appropriate pricing plan\n\n2. **API Key Generation**\n   - [ ] Generate API key in service dashboard\n   - [ ] Configure key permissions and scopes\n   - [ ] Note key expiration date (if applicable)\n   - [ ] Store key securely in environment variables\n\n3. **Service Configuration**\n   - [ ] Configure webhooks (if required)\n   - [ ] Set up rate limiting and quotas\n   - [ ] Configure allowed domains/IPs\n   - [ ] Test API connectivity\n\n#### Integration Testing\n```typescript\n// Test API connectivity\nconst testApiConnection = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/health`, {\n      headers: {\n        'Authorization': `Bearer ${process.env.API_KEY}`,\n        'Content-Type': 'application/json'\n      }\n    })\n    \n    if (response.ok) {\n      console.log('✅ API connection successful')\n    } else {\n      console.error('❌ API connection failed:', response.status)\n    }\n  } catch (error) {\n    console.error('❌ API connection error:', error)\n  }\n}\n```\n\n## 🚀 Vercel Deployment Configuration\n\n### Environment Variables Setup\n\n**Vercel Dashboard Steps:**\n1. Navigate to [Project] → Settings → Environment Variables\n2. Add each required variable:\n\n| Variable Name | Value | Environment | Type |\n|---------------|-------|-------------|------|\n| [VAR_1] | [Value/Secret] | Production, Preview | Plain Text/Secret |\n| [VAR_2] | [Value/Secret] | Production, Preview | Plain Text/Secret |\n\n**Vercel CLI Alternative:**\n```bash\n# Set production environment variables\nvercel env add VARIABLE_NAME_1 production\nvercel env add VARIABLE_NAME_2 production\n\n# Set preview environment variables\nvercel env add VARIABLE_NAME_1 preview\nvercel env add VARIABLE_NAME_2 preview\n\n# List all environment variables\nvercel env ls\n```\n\n### Build Configuration Updates\n\n**Update `next.config.js` if needed:**\n```javascript\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  env: {\n    // Only add non-secret variables here\n    CUSTOM_KEY: process.env.CUSTOM_KEY,\n  },\n  // Add any new configuration for external services\n}\n\nmodule.exports = nextConfig\n```\n\n### Deployment Settings\n\n**Build & Development Settings:**\n- [ ] Build Command: `npm run build`\n- [ ] Output Directory: `.next`\n- [ ] Install Command: `npm install`\n- [ ] Development Command: `npm run dev`\n\n**Function Configuration:**\n- [ ] Function timeout: [Adjust if API calls are slow]\n- [ ] Memory allocation: [Increase if processing heavy data]\n- [ ] Runtime: Node.js 18.x (or latest supported)\n\n## 🔒 Security Checklist\n\n### API Key Security\n- [ ] All API keys stored as Vercel secrets\n- [ ] No keys committed to version control\n- [ ] Keys have minimal required permissions\n- [ ] Key rotation schedule established\n- [ ] Access logging enabled where possible\n\n### Network Security\n- [ ] API endpoints use HTTPS only\n- [ ] CORS configured properly for external APIs\n- [ ] Rate limiting implemented\n- [ ] Input validation for all API calls\n- [ ] Error handling doesn't expose sensitive data\n\n### Environment Isolation\n- [ ] Production keys separate from development\n- [ ] Preview deployments use test/staging keys\n- [ ] No production data in development environments\n\n## 🧪 Testing Checklist\n\n### Pre-Deployment Testing\n\n**Local Testing:**\n```bash\n# Test with production-like environment variables\ncp .env.example .env.local\n# Add actual values to .env.local\nnpm run dev\n# Test all new functionality\n```\n\n**Integration Testing:**\n- [ ] All external API calls work correctly\n- [ ] Error handling for API failures\n- [ ] Rate limiting behavior\n- [ ] Authentication flows\n- [ ] Data validation and sanitization\n\n**Performance Testing:**\n- [ ] API response times acceptable\n- [ ] No memory leaks with new integrations\n- [ ] Proper caching implemented\n- [ ] Database query performance\n\n### Staging Deployment\n- [ ] Deploy to preview environment first\n- [ ] Test all new functionality in staging\n- [ ] Verify environment variables work\n- [ ] Check external API integrations\n- [ ] Performance and load testing\n\n## 📊 Monitoring & Alerting Setup\n\n### Application Monitoring\n- [ ] Add health checks for new APIs\n- [ ] Set up error tracking for new integrations\n- [ ] Monitor API usage and rate limits\n- [ ] Track performance metrics\n\n**Health Check Endpoint:**\n```typescript\n// app/api/health/route.ts\nexport async function GET() {\n  const checks = {\n    database: await checkDatabase(),\n    externalApi: await checkExternalApi(),\n    // Add checks for new services\n  }\n  \n  const allHealthy = Object.values(checks).every(check => check.healthy)\n  \n  return Response.json(\n    { status: allHealthy ? 'healthy' : 'unhealthy', checks },\n    { status: allHealthy ? 200 : 503 }\n  )\n}\n```\n\n### Alerting Configuration\n- [ ] Set up alerts for API failures\n- [ ] Monitor rate limit approaching\n- [ ] Track error rates and response times\n- [ ] Configure notification channels\n\n## 🚀 Deployment Execution\n\n### Pre-Deployment Steps\n1. [ ] All environment variables configured in Vercel\n2. [ ] External API accounts and keys ready\n3. [ ] Testing completed successfully\n4. [ ] Team notified of deployment\n5. [ ] Rollback plan prepared\n\n### Deployment Process\n1. [ ] Merge changes to main branch\n2. [ ] Verify automatic deployment triggers\n3. [ ] Monitor deployment logs\n4. [ ] Run post-deployment health checks\n5. [ ] Verify all functionality works\n\n### Post-Deployment Verification\n\n**Immediate Checks (0-15 minutes):**\n- [ ] Application loads successfully\n- [ ] All pages render correctly\n- [ ] External API integrations working\n- [ ] No console errors or warnings\n- [ ] Authentication flows functional\n\n**Extended Monitoring (15 minutes - 2 hours):**\n- [ ] Monitor error rates and performance\n- [ ] Check API usage and rate limits\n- [ ] Verify user workflows complete successfully\n- [ ] Monitor system resources and scaling\n\n**Success Criteria:**\n- [ ] All new features work as expected\n- [ ] No increase in error rates\n- [ ] Performance metrics within acceptable ranges\n- [ ] User experience remains smooth\n\n## 🔄 Rollback Plan\n\n### Rollback Triggers\n- Critical errors affecting user experience\n- External API failures causing system instability\n- Performance degradation beyond acceptable limits\n- Security vulnerabilities discovered\n\n### Rollback Process\n1. [ ] Revert to previous Vercel deployment\n2. [ ] Remove or disable new environment variables\n3. [ ] Notify team of rollback\n4. [ ] Investigate and document issues\n5. [ ] Plan fix and re-deployment\n\n### Rollback Verification\n- [ ] Application stability restored\n- [ ] All core functionality working\n- [ ] Performance back to baseline\n- [ ] User impact minimized\n\n## 📋 Documentation Updates\n\n### Required Documentation\n- [ ] Update README with new environment variables\n- [ ] Document new API integrations\n- [ ] Update deployment guide\n- [ ] Create troubleshooting guide for new features\n\n### Team Communication\n- [ ] Notify team of new environment requirements\n- [ ] Share API documentation and access details\n- [ ] Update onboarding documentation\n- [ ] Schedule knowledge sharing session\n\n---\n\n## ✅ Deployment Sign-off\n\n**Technical Lead Approval:**\n- [ ] Code review completed\n- [ ] Security review passed\n- [ ] Performance impact assessed\n- [ ] Documentation updated\n\n**Deployment Checklist Completed By:** [Name]\n**Date:** [Date]\n**Deployment Status:** [Success/Failed/Rolled Back]\n**Notes:** [Any issues or observations]\n\n---\n\n## 🆘 Emergency Contacts\n\n**On-Call Engineer:** [Contact info]\n**External API Support:** [Service provider support]\n**Vercel Support:** [If enterprise plan]\n**Team Lead:** [Contact info]\n\n## 📚 Reference Links\n\n- [Vercel Environment Variables Documentation](https://vercel.com/docs/concepts/projects/environment-variables)\n- [Next.js Environment Variables](https://nextjs.org/docs/basic-features/environment-variables)\n- [External API Documentation Links]\n- [Internal Deployment Runbook]\n```\n\n## 3. Service-Specific Checklists\n\n**Generate specific checklists based on detected services:**\n\n### Stripe Integration Checklist\n- [ ] Stripe account configured\n- [ ] Webhook endpoints set up\n- [ ] Test and live API keys configured\n- [ ] Product and pricing configured\n- [ ] Tax settings reviewed\n\n### Supabase Configuration\n- [ ] Database connection string updated\n- [ ] RLS policies reviewed\n- [ ] API keys rotated if needed\n- [ ] Edge functions deployed\n\n### Email Service (Resend/SendGrid)\n- [ ] Domain verification completed\n- [ ] DKIM/SPF records configured\n- [ ] Template IDs updated\n- [ ] Sending limits reviewed\n\n### Analytics Services\n- [ ] Tracking IDs configured\n- [ ] Privacy policy updated\n- [ ] Cookie consent implemented\n- [ ] Data retention policies set\n\n## 4. Automated Validation Tasks\n\n**Create validation scripts for AI to implement:**\n\n```typescript\n// scripts/validate-deployment.ts\nimport { validateEnvironment } from '@/lib/config/env-validation'\nimport { testExternalApis } from '@/lib/config/api-health'\n\nasync function validateDeployment() {\n  console.log('🔍 Validating deployment configuration...')\n  \n  try {\n    // Validate environment variables\n    validateEnvironment()\n    \n    // Test external API connections\n    await testExternalApis()\n    \n    // Run health checks\n    await runHealthChecks()\n    \n    console.log('✅ Deployment validation successful')\n  } catch (error) {\n    console.error('❌ Deployment validation failed:', error)\n    process.exit(1)\n  }\n}\n\nvalidateDeployment()\n```\n\n## Instructions:\n1. **Analyze modified configuration files** to detect new environment variables and API integrations\n2. **Generate comprehensive deployment checklist** with specific steps for each change\n3. **Create service-specific setup instructions** based on detected integrations\n4. **Include security and testing requirements** for all new configurations\n5. **Provide rollback procedures** and emergency contacts\n6. **Generate validation scripts** for automated testing\n7. **Update documentation requirements** for team knowledge sharing\n\nThe goal is to ensure that any configuration changes are properly deployed to production with comprehensive testing, security measures, and rollback procedures in place."
  }
}