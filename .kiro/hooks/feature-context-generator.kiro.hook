{
  "enabled": true,
  "name": "Feature Context Generator",
  "description": "Automatically creates context files that explain new features' purpose, dependencies, and usage for future AI sessions",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "components/**/*.tsx",
      "app/**/page.tsx",
      "app/api/**/*.ts",
      "lib/services/*.ts",
      "hooks/*.ts",
      "app/**/layout.tsx"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "New features or significant functionality have been detected. Please analyze the changes and create comprehensive context files to document these features for future AI sessions.\n\n**Analysis Tasks:**\n\n1. **Identify New Features**:\n   - Analyze modified files to detect new functionality\n   - Determine if changes represent a complete feature or enhancement\n   - Identify the feature scope and boundaries\n   - Check for related files that are part of the same feature\n\n2. **For Each New Feature, Create: `.kiro/features/[feature-name]-context.md`**\n\n**Feature Context Template:**\n\n```markdown\n# Feature Context: [Feature Name]\n\n*Auto-generated: [timestamp]*\n*Feature Type: [Component/API/Service/Page/Hook]*\n*Status: [In Development/Complete/Testing]*\n\n## 🎯 Feature Overview\n\n### Purpose\n- **What**: Brief description of what this feature does\n- **Why**: Business reason or user need this feature addresses\n- **Who**: Target users (students, professionals, admins, etc.)\n- **When**: When users would interact with this feature\n\n### Key Functionality\n- [ ] Primary function 1\n- [ ] Primary function 2\n- [ ] Secondary features\n- [ ] Edge cases handled\n\n## 🏗️ Technical Implementation\n\n### Core Files\n```\n[feature-name]/\n├── components/\n│   ├── FeatureComponent.tsx     # Main UI component\n│   ├── FeatureForm.tsx          # Form handling\n│   └── FeatureCard.tsx          # Display component\n├── services/\n│   └── feature-service.ts       # Business logic\n├── hooks/\n│   └── useFeature.ts           # Custom hook\n├── types/\n│   └── feature.types.ts        # TypeScript definitions\n└── api/\n    └── feature/route.ts        # API endpoints\n```\n\n### Dependencies\n**External Libraries:**\n- `library-name@version` - Purpose and usage\n- `another-lib@version` - Why this was chosen\n\n**Internal Dependencies:**\n- `@/lib/supabase` - Database operations\n- `@/components/ui/button` - UI components used\n- `@/lib/auth/supabase-auth` - Authentication integration\n- `@/hooks/useSubscription` - Subscription tier checking\n\n**Database Tables:**\n- `table_name` - What data is stored/retrieved\n- `related_table` - Relationships and joins used\n\n## 🔌 Integration Points\n\n### Authentication\n- **Required**: Yes/No\n- **Permissions**: What user roles can access\n- **Protected Routes**: List of protected endpoints/pages\n\n### Subscription Tiers\n- **Free Tier**: What functionality is available\n- **Pro Tier**: Additional features unlocked\n- **Enterprise**: Advanced capabilities\n\n### External Services\n- **Supabase**: Database operations, real-time subscriptions\n- **Stripe**: Payment processing (if applicable)\n- **Third-party APIs**: External integrations\n\n## 📱 User Experience\n\n### User Journey\n1. **Entry Point**: How users discover/access this feature\n2. **Main Flow**: Step-by-step user interaction\n3. **Success State**: What happens when feature works correctly\n4. **Error Handling**: How errors are presented to users\n5. **Exit Points**: How users leave or complete the feature\n\n### UI/UX Considerations\n- **Responsive Design**: Mobile, tablet, desktop behavior\n- **Accessibility**: Screen reader support, keyboard navigation\n- **Loading States**: How loading is communicated\n- **Error States**: User-friendly error messages\n- **Empty States**: What users see with no data\n\n## 🧪 Testing Strategy\n\n### Unit Tests\n- [ ] Component rendering tests\n- [ ] Business logic validation\n- [ ] Hook functionality tests\n- [ ] Utility function tests\n\n### Integration Tests\n- [ ] API endpoint testing\n- [ ] Database operations\n- [ ] Authentication flow\n- [ ] External service integration\n\n### E2E Tests\n- [ ] Complete user journey\n- [ ] Cross-browser compatibility\n- [ ] Mobile responsiveness\n- [ ] Performance under load\n\n## 🚀 Deployment Considerations\n\n### Environment Variables\n```bash\n# Required environment variables\nFEATURE_API_KEY=your_api_key\nFEATURE_ENABLED=true\n```\n\n### Database Migrations\n- [ ] New tables created\n- [ ] Existing tables modified\n- [ ] Indexes added for performance\n- [ ] RLS policies updated\n\n### Performance Impact\n- **Bundle Size**: Impact on JavaScript bundle\n- **Database Queries**: New queries and their performance\n- **API Calls**: External API usage and rate limits\n- **Caching**: What data should be cached\n\n## 🔧 Configuration\n\n### Feature Flags\n```typescript\n// Feature can be toggled on/off\nconst FEATURE_ENABLED = process.env.NEXT_PUBLIC_FEATURE_ENABLED === 'true'\n```\n\n### Customization Options\n- **Admin Settings**: What admins can configure\n- **User Preferences**: User-customizable options\n- **Default Values**: Sensible defaults for new users\n\n## 📚 Usage Examples\n\n### For Developers\n```typescript\n// How to use this feature in other components\nimport { useFeature } from '@/hooks/useFeature'\nimport { FeatureComponent } from '@/components/feature/FeatureComponent'\n\nfunction MyComponent() {\n  const { data, loading, error } = useFeature()\n  \n  return (\n    <FeatureComponent \n      data={data}\n      onAction={handleAction}\n    />\n  )\n}\n```\n\n### For API Integration\n```typescript\n// API usage examples\nconst response = await fetch('/api/feature', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({ param: 'value' })\n})\n```\n\n## 🐛 Known Issues & Limitations\n\n### Current Limitations\n- [ ] Issue 1: Description and potential workaround\n- [ ] Issue 2: When this might be problematic\n- [ ] Performance limitation under specific conditions\n\n### Future Enhancements\n- [ ] Planned improvement 1\n- [ ] Feature extension idea\n- [ ] Performance optimization opportunity\n\n## 🔗 Related Features\n\n### Dependencies (Features this relies on)\n- **User Authentication**: Required for access control\n- **Subscription Management**: Tier-based feature access\n- **Dashboard System**: Where feature is displayed\n\n### Dependents (Features that rely on this)\n- **Analytics Dashboard**: Uses data from this feature\n- **Reporting System**: Includes metrics from this feature\n\n## 📖 Documentation Links\n\n### Internal Documentation\n- [API Documentation](./api-docs.md)\n- [Component Library](./component-guide.md)\n- [Database Schema](./database-schema.md)\n\n### External Resources\n- [Library Documentation](https://example.com/docs)\n- [Design System](https://design.cybernexacademy.com)\n- [Security Guidelines](./security-guide.md)\n\n## 🎯 Success Metrics\n\n### User Engagement\n- **Usage Rate**: Percentage of users who use this feature\n- **Completion Rate**: Users who complete the full workflow\n- **Return Usage**: Users who use feature multiple times\n\n### Technical Metrics\n- **Performance**: Page load times, API response times\n- **Error Rate**: Percentage of failed operations\n- **Uptime**: Feature availability\n\n### Business Impact\n- **Conversion**: How feature affects subscription upgrades\n- **Retention**: Impact on user retention rates\n- **Support**: Reduction in support tickets\n\n---\n\n## 🤖 AI Assistant Notes\n\n### Context for Future Sessions\n- **Primary Use Case**: Most common way users interact with this feature\n- **Common Issues**: Frequent problems and their solutions\n- **Extension Points**: Where new functionality could be added\n- **Integration Patterns**: How this feature connects with others\n\n### Development Patterns\n- **Code Style**: Specific patterns used in this feature\n- **Error Handling**: How errors are managed and reported\n- **State Management**: How component/application state is handled\n- **Data Flow**: How data moves through the feature\n\n### Maintenance Notes\n- **Update Frequency**: How often this feature needs updates\n- **Breaking Changes**: What changes would break existing functionality\n- **Monitoring**: What should be monitored for this feature\n- **Scaling**: How feature handles increased usage\n```\n\n**Instructions:**\n1. **Analyze modified files** to identify new features or significant enhancements\n2. **Determine feature boundaries** and related components\n3. **Extract technical details** including dependencies and integration points\n4. **Document user experience** and interaction patterns\n5. **Include testing and deployment considerations**\n6. **Add usage examples** and code snippets\n7. **Note known issues** and future enhancement opportunities\n8. **Create comprehensive context** for future AI sessions\n\n**Feature Detection Criteria:**\n- New page routes with significant functionality\n- New API endpoints with business logic\n- New service classes or major service enhancements\n- New custom hooks with complex logic\n- New component families (multiple related components)\n- Integration with external services or APIs\n\n**Cybernex Academy Specific Context:**\n- Focus on cybersecurity education and professional development\n- Consider subscription tiers and premium features\n- Include community and learning path integration\n- Document threat intelligence and security considerations\n- Note compliance and professional standards\n\nPlease analyze the changes and create detailed feature context files that will help future AI sessions understand and work with these features effectively."
  }
}