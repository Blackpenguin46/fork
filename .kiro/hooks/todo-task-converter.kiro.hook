{
  "enabled": true,
  "name": "TODO Task Converter",
  "description": "Automatically converts TODO comments in code to properly formatted AI prompts with context and saves them to a task queue",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "**/*.ts",
      "**/*.tsx",
      "**/*.js",
      "**/*.jsx",
      "**/*.py",
      "**/*.java",
      "**/*.cpp",
      "**/*.c",
      "**/*.cs",
      "**/*.go",
      "**/*.rs",
      "**/*.php",
      "**/*.rb"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "Code files have been modified and may contain new TODO comments. Please scan for TODO, FIXME, HACK, and NOTE comments, then convert them to properly formatted AI prompts with full context.\n\n**Analysis Tasks:**\n\n## 1. Scan for TODO Comments\n\n**Search for comment patterns:**\n- `// TODO:` or `// TODO -`\n- `/* TODO:` or `/* TODO -`\n- `# TODO:` or `# TODO -`\n- `// FIXME:` or `// FIXME -`\n- `// HACK:` or `// HACK -`\n- `// NOTE:` or `// NOTE -`\n- `// BUG:` or `// BUG -`\n- `// OPTIMIZE:` or `// OPTIMIZE -`\n\n**Extract comment details:**\n- File path and line number\n- Comment type (TODO, FIXME, HACK, etc.)\n- Comment description and context\n- Surrounding code for context\n- Function/class/component name containing the comment\n\n## 2. Generate Task Queue\n\n**Create/Update: `.kiro/todo-task-queue.json`**\n\n```json\n{\n  \"version\": \"1.0\",\n  \"lastUpdated\": \"[timestamp]\",\n  \"queueStats\": {\n    \"totalTasks\": 0,\n    \"pendingTasks\": 0,\n    \"inProgressTasks\": 0,\n    \"completedTasks\": 0,\n    \"todoTasks\": 0,\n    \"fixmeTasks\": 0,\n    \"hackTasks\": 0,\n    \"optimizeTasks\": 0\n  },\n  \"tasks\": [\n    {\n      \"id\": \"todo-[uuid]\",\n      \"type\": \"todo\",\n      \"priority\": \"medium\",\n      \"status\": \"pending\",\n      \"createdAt\": \"[timestamp]\",\n      \"sourceFile\": \"lib/services/news-aggregation.ts\",\n      \"lineNumber\": 45,\n      \"originalComment\": \"// TODO: implement news aggregation from multiple sources\",\n      \"commentType\": \"TODO\",\n      \"contextFunction\": \"fetchNewsFromSources\",\n      \"contextClass\": \"NewsAggregationService\",\n      \"title\": \"Implement Multi-Source News Aggregation\",\n      \"description\": \"Add functionality to aggregate news from multiple cybersecurity sources simultaneously\",\n      \"estimatedEffort\": \"2-3 hours\",\n      \"tags\": [\"news\", \"aggregation\", \"api-integration\", \"cybersecurity\"],\n      \"relatedFiles\": [\n        \"lib/types/news.ts\",\n        \"app/api/news/route.ts\",\n        \"components/news/NewsFeed.tsx\"\n      ],\n      \"dependencies\": [\n        \"RSS parser configuration\",\n        \"API rate limiting setup\",\n        \"Database schema for news sources\"\n      ],\n      \"prompt\": \"Implement multi-source news aggregation functionality in the NewsAggregationService class.\\n\\n**Context:**\\nFile: `lib/services/news-aggregation.ts`\\nFunction: `fetchNewsFromSources` (line 45)\\nOriginal TODO: // TODO: implement news aggregation from multiple sources\\n\\n**Current Code Context:**\\n```typescript\\nclass NewsAggregationService {\\n  // Existing methods...\\n  \\n  static async fetchNewsFromSources() {\\n    // TODO: implement news aggregation from multiple sources\\n    // Current implementation only handles single source\\n  }\\n}\\n```\\n\\n**Requirements:**\\n\\n1. **Multi-Source Support**:\\n   - Fetch news from multiple RSS feeds simultaneously\\n   - Handle different source formats (RSS, JSON APIs, XML)\\n   - Implement proper error handling for failed sources\\n   - Add source prioritization and filtering\\n\\n2. **Rate Limiting & Performance**:\\n   - Implement rate limiting to respect source limits\\n   - Add concurrent fetching with proper throttling\\n   - Cache responses to avoid duplicate requests\\n   - Handle timeouts and retries gracefully\\n\\n3. **Data Processing**:\\n   - Normalize data from different source formats\\n   - Deduplicate articles across sources\\n   - Extract and standardize metadata (title, description, date)\\n   - Implement content quality scoring\\n\\n4. **Integration Requirements**:\\n   - Update `lib/types/news.ts` with new interfaces if needed\\n   - Ensure compatibility with existing `app/api/news/route.ts`\\n   - Maintain compatibility with `components/news/NewsFeed.tsx`\\n   - Add proper TypeScript typing throughout\\n\\n5. **Cybernex Academy Specific**:\\n   - Focus on cybersecurity news sources\\n   - Implement threat intelligence categorization\\n   - Add professional relevance scoring\\n   - Support subscription-tier based source access\\n\\n**Implementation Approach:**\\n```typescript\\nstatic async fetchNewsFromSources(sources: NewsSource[]): Promise<NewsArticle[]> {\\n  // 1. Validate and prepare sources\\n  // 2. Implement concurrent fetching with rate limiting\\n  // 3. Process and normalize responses\\n  // 4. Deduplicate and merge results\\n  // 5. Return aggregated news articles\\n}\\n```\\n\\n**Testing Requirements:**\\n- Unit tests for individual source fetching\\n- Integration tests for multi-source aggregation\\n- Error handling tests for failed sources\\n- Performance tests for concurrent operations\\n\\n**Success Criteria:**\\n- Successfully aggregates news from 5+ cybersecurity sources\\n- Handles source failures gracefully without breaking\\n- Processes 100+ articles in under 30 seconds\\n- Maintains data quality and deduplication accuracy\\n\\n**Related Documentation:**\\n- Review existing NewsAggregationService implementation\\n- Check news source configuration and API documentation\\n- Understand current database schema for news storage\"\n    },\n    {\n      \"id\": \"fixme-[uuid]\",\n      \"type\": \"fixme\",\n      \"priority\": \"high\",\n      \"status\": \"pending\",\n      \"createdAt\": \"[timestamp]\",\n      \"sourceFile\": \"components/auth/LoginForm.tsx\",\n      \"lineNumber\": 78,\n      \"originalComment\": \"// FIXME: password validation is too weak\",\n      \"commentType\": \"FIXME\",\n      \"contextFunction\": \"validatePassword\",\n      \"contextClass\": \"LoginForm\",\n      \"title\": \"Strengthen Password Validation\",\n      \"description\": \"Improve password validation to meet security standards\",\n      \"estimatedEffort\": \"1-2 hours\",\n      \"tags\": [\"security\", \"authentication\", \"validation\", \"password\"],\n      \"securityImpact\": \"high\",\n      \"prompt\": \"Fix weak password validation in the LoginForm component.\\n\\n**Context:**\\nFile: `components/auth/LoginForm.tsx`\\nFunction: `validatePassword` (line 78)\\nOriginal FIXME: // FIXME: password validation is too weak\\n\\n**Security Requirements:**\\n\\n1. **Password Strength Criteria**:\\n   - Minimum 12 characters length\\n   - At least one uppercase letter\\n   - At least one lowercase letter\\n   - At least one number\\n   - At least one special character\\n   - No common passwords or dictionary words\\n\\n2. **Implementation Requirements**:\\n   - Real-time validation feedback\\n   - Password strength indicator\\n   - Clear error messages for failed criteria\\n   - Accessibility compliance for screen readers\\n\\n3. **Security Considerations**:\\n   - No password logging or exposure\\n   - Secure password comparison\\n   - Rate limiting for validation attempts\\n   - Integration with existing auth system\\n\\n**Success Criteria:**\\n- Meets cybersecurity industry password standards\\n- Provides clear user feedback\\n- Maintains good user experience\\n- Passes security audit requirements\"\n    }\n  ]\n}\n```\n\n## 3. Comment Type Classification\n\n**Priority Assignment:**\n- **TODO**: Medium priority (feature implementation)\n- **FIXME**: High priority (bug fixes, issues)\n- **HACK**: High priority (technical debt, temporary solutions)\n- **BUG**: Critical priority (confirmed bugs)\n- **OPTIMIZE**: Low-Medium priority (performance improvements)\n- **NOTE**: Low priority (documentation, clarification)\n\n**Effort Estimation:**\n- **Simple**: 30 minutes - 1 hour (small fixes, simple features)\n- **Medium**: 1-3 hours (moderate features, refactoring)\n- **Complex**: 3-8 hours (major features, architectural changes)\n- **Epic**: 1+ days (large features, system redesign)\n\n**Tag Generation:**\nBased on file location and context:\n- **File-based**: `auth`, `dashboard`, `api`, `components`, `services`\n- **Technology**: `typescript`, `react`, `nextjs`, `supabase`, `tailwind`\n- **Feature**: `news`, `learning`, `community`, `security`, `payments`\n- **Type**: `bug-fix`, `feature`, `optimization`, `refactoring`, `testing`\n\n## 4. Context Analysis\n\n**Code Context Extraction:**\n```typescript\n// Extract surrounding code for better context\nfunction extractCodeContext(filePath: string, lineNumber: number): CodeContext {\n  return {\n    functionName: 'detectFunctionName()',\n    className: 'detectClassName()',\n    imports: 'extractImports()',\n    surroundingCode: 'getCodeLines(lineNumber - 5, lineNumber + 5)',\n    fileType: 'determineFileType(filePath)',\n    relatedFiles: 'findRelatedFiles(filePath)'\n  }\n}\n```\n\n**Dependency Analysis:**\n- **Import statements**: What libraries/modules are being used\n- **Function calls**: What other functions are called nearby\n- **Type definitions**: What TypeScript types are involved\n- **Database operations**: What data is being accessed\n- **API calls**: What external services are involved\n\n**Related File Detection:**\n- **Type files**: `*.types.ts` files related to the feature\n- **Test files**: `*.test.ts` or `*.spec.ts` files\n- **Component files**: Related UI components\n- **Service files**: Related business logic services\n- **API routes**: Related API endpoints\n\n## 5. Cybernex Academy Specific Context\n\n**Feature Area Classification:**\n- **Authentication**: User login, registration, password management\n- **Learning Management**: Courses, progress tracking, certifications\n- **Community**: Forums, discussions, user interactions\n- **Content Management**: Resources, articles, learning materials\n- **Analytics**: User behavior, learning analytics, reporting\n- **Security**: Threat intelligence, security features, compliance\n- **Payments**: Subscriptions, billing, premium features\n- **Admin**: Administrative tools, user management, content moderation\n\n**Business Impact Assessment:**\n- **User Experience**: How does this affect end users?\n- **Security**: Are there security implications?\n- **Performance**: Will this impact application performance?\n- **Scalability**: Does this affect system scalability?\n- **Compliance**: Are there regulatory considerations?\n\n## 6. AI Prompt Enhancement\n\n**Prompt Structure:**\n```markdown\n# Task Title\n\n**Context Information**\n- File location and line number\n- Original comment and surrounding code\n- Function/class context\n\n**Requirements**\n- Detailed functional requirements\n- Technical specifications\n- Integration requirements\n\n**Implementation Approach**\n- Suggested implementation strategy\n- Code structure recommendations\n- Best practices to follow\n\n**Testing Requirements**\n- Unit test specifications\n- Integration test needs\n- Performance test criteria\n\n**Success Criteria**\n- Measurable completion criteria\n- Quality gates\n- Performance benchmarks\n\n**Related Documentation**\n- Links to relevant docs\n- Related code files\n- External resources\n```\n\n**Context Enrichment:**\n- **Project Knowledge**: Include relevant project patterns and conventions\n- **Technology Stack**: Reference Next.js, TypeScript, Supabase best practices\n- **Business Domain**: Include cybersecurity education context\n- **User Types**: Consider different user roles (students, professionals, admins)\n\n## 7. Task Queue Management\n\n**Automatic Prioritization:**\n```javascript\nfunction calculatePriority(comment) {\n  let priority = 'medium'\n  \n  // Security-related tasks get high priority\n  if (comment.includes('security') || comment.includes('auth')) {\n    priority = 'high'\n  }\n  \n  // Performance issues get high priority\n  if (comment.includes('performance') || comment.includes('slow')) {\n    priority = 'high'\n  }\n  \n  // User-facing bugs get critical priority\n  if (comment.type === 'BUG' && comment.includes('user')) {\n    priority = 'critical'\n  }\n  \n  return priority\n}\n```\n\n**Duplicate Detection:**\n- Check for similar TODOs in the same file\n- Identify related tasks across different files\n- Group related tasks into epics\n- Prevent duplicate task creation\n\n**Task Relationships:**\n- **Dependencies**: Tasks that must be completed first\n- **Related**: Tasks that are similar or in the same feature area\n- **Blocking**: Tasks that prevent other work\n- **Epic**: Large tasks that can be broken down\n\n## Instructions:\n1. **Scan all modified files** for TODO-style comments\n2. **Extract full context** including surrounding code and function information\n3. **Generate comprehensive AI prompts** with detailed requirements and success criteria\n4. **Classify and prioritize** tasks based on type and business impact\n5. **Add Cybernex Academy specific context** and requirements\n6. **Create actionable prompts** that AI agents can execute immediately\n7. **Maintain task queue** with proper categorization and status tracking\n8. **Detect relationships** between tasks and group related work\n\nThe goal is to convert informal TODO comments into structured, actionable tasks that AI agents can pick up and complete with full context and clear requirements."
  }
}